name: Build and Deploy to Amazon ECS Manual
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
      ecr_tag:
        description: 'The AWS ECR image tag'
        required: true
env:
  aws_region: us-east-1
  ecs_service: augmentor
  ecs_cluster: main-fargate
  ecr_registry: 513944911941.dkr.ecr.us-east-1.amazonaws.com
  ecr_repository: augmentor

jobs:
  build:
    name: Build
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      ecr_tag: ${{ steps.tag-version.outputs.new_tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.aws_region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Bump version and push tag
      id: tag-version
      uses: mathieudutour/github-tag-action@v5
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        release_branches: .*

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{env.ecr_repository}}
        IMAGE_TAG: ${{ steps.tag-version.outputs.new_tag }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  auto_deploy:
    name: Auto Deploy
    needs: build
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.aws_region }}

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract-branch

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.${{ steps.extract-branch.outputs.branch }}.json
        container-name: ${{ env.ecs_service }}
        image: ${{ env.ecr_registry }}/${{ env.ecr_repository }}:${{ needs.build.outputs.ecr_tag }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ecs_service }}
        cluster: ${{ env.ecs_cluster }}-${{ steps.extract-branch.outputs.branch }}
        wait-for-service-stability: true

  deploy:
    name: Deploy
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.aws_region }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.${{ github.event.inputs.environment }}.json
        container-name: ${{ env.ecs_service }}
        image: ${{ env.ecr_registry }}/${{ env.ecr_repository }}:${{ github.event.inputs.ecr_tag }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ecs_service }}
        cluster: ${{ env.ecs_cluster}}-${{ github.event.inputs.environment }}
        wait-for-service-stability: true